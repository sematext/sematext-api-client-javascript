/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../stcloud/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../stcloud/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SematextApiClientJavascript);
  }
}(this, function(expect, SematextApiClientJavascript) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UsageDto', function() {
      beforeEach(function() {
        instance = new SematextApiClientJavascript.UsageDto();
      });

      it('should create an instance of UsageDto', function() {
        // TODO: update the code to test UsageDto
        expect(instance).to.be.a(SematextApiClientJavascript.UsageDto);
      });

      it('should have the property dailyUsage (base name: "dailyUsage")', function() {
        // TODO: update the code to test the property dailyUsage
        expect(instance).to.have.property('dailyUsage');
        // expect(instance.dailyUsage).to.be(expectedValueLiteral);
      });

      it('should have the property dailyVolumeMB (base name: "dailyVolumeMB")', function() {
        // TODO: update the code to test the property dailyVolumeMB
        expect(instance).to.have.property('dailyVolumeMB');
        // expect(instance.dailyVolumeMB).to.be(expectedValueLiteral);
      });

      it('should have the property end (base name: "end")', function() {
        // TODO: update the code to test the property end
        expect(instance).to.have.property('end');
        // expect(instance.end).to.be(expectedValueLiteral);
      });

      it('should have the property failedCount (base name: "failedCount")', function() {
        // TODO: update the code to test the property failedCount
        expect(instance).to.have.property('failedCount');
        // expect(instance.failedCount).to.be(expectedValueLiteral);
      });

      it('should have the property ingestedCount (base name: "ingestedCount")', function() {
        // TODO: update the code to test the property ingestedCount
        expect(instance).to.have.property('ingestedCount');
        // expect(instance.ingestedCount).to.be(expectedValueLiteral);
      });

      it('should have the property ingestedVolume (base name: "ingestedVolume")', function() {
        // TODO: update the code to test the property ingestedVolume
        expect(instance).to.have.property('ingestedVolume');
        // expect(instance.ingestedVolume).to.be(expectedValueLiteral);
      });

      it('should have the property limitChangeEvents (base name: "limitChangeEvents")', function() {
        // TODO: update the code to test the property limitChangeEvents
        expect(instance).to.have.property('limitChangeEvents');
        // expect(instance.limitChangeEvents).to.be(expectedValueLiteral);
      });

      it('should have the property maxAllowedMB (base name: "maxAllowedMB")', function() {
        // TODO: update the code to test the property maxAllowedMB
        expect(instance).to.have.property('maxAllowedMB');
        // expect(instance.maxAllowedMB).to.be(expectedValueLiteral);
      });

      it('should have the property maxLimitMB (base name: "maxLimitMB")', function() {
        // TODO: update the code to test the property maxLimitMB
        expect(instance).to.have.property('maxLimitMB');
        // expect(instance.maxLimitMB).to.be(expectedValueLiteral);
      });

      it('should have the property start (base name: "start")', function() {
        // TODO: update the code to test the property start
        expect(instance).to.have.property('start');
        // expect(instance.start).to.be(expectedValueLiteral);
      });

      it('should have the property storedCount (base name: "storedCount")', function() {
        // TODO: update the code to test the property storedCount
        expect(instance).to.have.property('storedCount');
        // expect(instance.storedCount).to.be(expectedValueLiteral);
      });

      it('should have the property storedVolume (base name: "storedVolume")', function() {
        // TODO: update the code to test the property storedVolume
        expect(instance).to.have.property('storedVolume');
        // expect(instance.storedVolume).to.be(expectedValueLiteral);
      });

      it('should have the property volumeChangeEvents (base name: "volumeChangeEvents")', function() {
        // TODO: update the code to test the property volumeChangeEvents
        expect(instance).to.have.property('volumeChangeEvents');
        // expect(instance.volumeChangeEvents).to.be(expectedValueLiteral);
      });

    });
  });

}));
