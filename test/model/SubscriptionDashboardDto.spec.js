/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../stcloud/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../stcloud/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SematextApiClientJavascript);
  }
}(this, function(expect, SematextApiClientJavascript) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SubscriptionDashboardDto', function() {
      beforeEach(function() {
        instance = new SematextApiClientJavascript.SubscriptionDashboardDto();
      });

      it('should create an instance of SubscriptionDashboardDto', function() {
        // TODO: update the code to test SubscriptionDashboardDto
        expect(instance).to.be.a(SematextApiClientJavascript.SubscriptionDashboardDto);
      });

      it('should have the property addresses (base name: "addresses")', function() {
        // TODO: update the code to test the property addresses
        expect(instance).to.have.property('addresses');
        // expect(instance.addresses).to.be(expectedValueLiteral);
      });

      it('should have the property dashboardId (base name: "dashboardId")', function() {
        // TODO: update the code to test the property dashboardId
        expect(instance).to.have.property('dashboardId');
        // expect(instance.dashboardId).to.be(expectedValueLiteral);
      });

      it('should have the property enable (base name: "enable")', function() {
        // TODO: update the code to test the property enable
        expect(instance).to.have.property('enable');
        // expect(instance.enable).to.be(expectedValueLiteral);
      });

      it('should have the property filters (base name: "filters")', function() {
        // TODO: update the code to test the property filters
        expect(instance).to.have.property('filters');
        // expect(instance.filters).to.be(expectedValueLiteral);
      });

      it('should have the property frequency (base name: "frequency")', function() {
        // TODO: update the code to test the property frequency
        expect(instance).to.have.property('frequency');
        // expect(instance.frequency).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property reportName (base name: "reportName")', function() {
        // TODO: update the code to test the property reportName
        expect(instance).to.have.property('reportName');
        // expect(instance.reportName).to.be(expectedValueLiteral);
      });

      it('should have the property sendTime (base name: "sendTime")', function() {
        // TODO: update the code to test the property sendTime
        expect(instance).to.have.property('sendTime');
        // expect(instance.sendTime).to.be(expectedValueLiteral);
      });

      it('should have the property subject (base name: "subject")', function() {
        // TODO: update the code to test the property subject
        expect(instance).to.have.property('subject');
        // expect(instance.subject).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property timeRange (base name: "timeRange")', function() {
        // TODO: update the code to test the property timeRange
        expect(instance).to.have.property('timeRange');
        // expect(instance.timeRange).to.be(expectedValueLiteral);
      });

    });
  });

}));
