/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

'use strict'

//const SematextApiClientJavascript = import ('../../stcloud/index.js')
//import {expect} from 'chai'

/* eslint-disable no-unused-vars*/
var instance

describe('(package)', function () {
  describe('AlertRule', function () {
    beforeEach(function () {
      //instance = new SematextApiClientJavascript.AlertRule()
    })

    it('should create an instance of AlertRule', function () {
      // TODO: update the code to test AlertRule
      // expect(instance)to.be.a(SematextApiClientJavascript.AlertRule)
    })

    it('should have the property accountEmail (base name: "accountEmail")', function () {
      // TODO: update the code to test the property accountEmail
      // expect(instance)to.have.property('accountEmail')
      // expect(instance.accountEmail).to.be(expectedValueLiteral);
    })

    it('should have the property allowedAppTypes (base name: "allowedAppTypes")', function () {
      // TODO: update the code to test the property allowedAppTypes
      // expect(instance)to.have.property('allowedAppTypes')
      // expect(instance.allowedAppTypes).to.be(expectedValueLiteral);
    })

    it('should have the property analyzingTime (base name: "analyzingTime")', function () {
      // TODO: update the code to test the property analyzingTime
      // expect(instance)to.have.property('analyzingTime')
      // expect(instance.analyzingTime).to.be(expectedValueLiteral);
    })

    it('should have the property appDisplayState (base name: "appDisplayState")', function () {
      // TODO: update the code to test the property appDisplayState
      // expect(instance)to.have.property('appDisplayState')
      // expect(instance.appDisplayState).to.be(expectedValueLiteral);
    })

    it('should have the property appId (base name: "appId")', function () {
      // TODO: update the code to test the property appId
      // expect(instance)to.have.property('appId')
      // expect(instance.appId).to.be(expectedValueLiteral);
    })

    it('should have the property appName (base name: "appName")', function () {
      // TODO: update the code to test the property appName
      // expect(instance)to.have.property('appName')
      // expect(instance.appName).to.be(expectedValueLiteral);
    })

    it('should have the property appState (base name: "appState")', function () {
      // TODO: update the code to test the property appState
      // expect(instance)to.have.property('appState')
      // expect(instance.appState).to.be(expectedValueLiteral);
    })

    it('should have the property appToken (base name: "appToken")', function () {
      // TODO: update the code to test the property appToken
      // expect(instance)to.have.property('appToken')
      // expect(instance.appToken).to.be(expectedValueLiteral);
    })

    it('should have the property appType (base name: "appType")', function () {
      // TODO: update the code to test the property appType
      // expect(instance)to.have.property('appType')
      // expect(instance.appType).to.be(expectedValueLiteral);
    })

    it('should have the property backToNormalNeeded (base name: "backToNormalNeeded")', function () {
      // TODO: update the code to test the property backToNormalNeeded
      // expect(instance)to.have.property('backToNormalNeeded')
      // expect(instance.backToNormalNeeded).to.be(expectedValueLiteral);
    })

    it('should have the property chartKey (base name: "chartKey")', function () {
      // TODO: update the code to test the property chartKey
      // expect(instance)to.have.property('chartKey')
      // expect(instance.chartKey).to.be(expectedValueLiteral);
    })

    it('should have the property color (base name: "color")', function () {
      // TODO: update the code to test the property color
      // expect(instance)to.have.property('color')
      // expect(instance.color).to.be(expectedValueLiteral);
    })

    it('should have the property creatorEmail (base name: "creatorEmail")', function () {
      // TODO: update the code to test the property creatorEmail
      // expect(instance)to.have.property('creatorEmail')
      // expect(instance.creatorEmail).to.be(expectedValueLiteral);
    })

    it('should have the property defaultAggType (base name: "defaultAggType")', function () {
      // TODO: update the code to test the property defaultAggType
      // expect(instance)to.have.property('defaultAggType')
      // expect(instance.defaultAggType).to.be(expectedValueLiteral);
    })

    it('should have the property description (base name: "description")', function () {
      // TODO: update the code to test the property description
      // expect(instance)to.have.property('description')
      // expect(instance.description).to.be(expectedValueLiteral);
    })

    it('should have the property disallowedAppTypes (base name: "disallowedAppTypes")', function () {
      // TODO: update the code to test the property disallowedAppTypes
      // expect(instance)to.have.property('disallowedAppTypes')
      // expect(instance.disallowedAppTypes).to.be(expectedValueLiteral);
    })

    it('should have the property enabled (base name: "enabled")', function () {
      // TODO: update the code to test the property enabled
      // expect(instance)to.have.property('enabled')
      // expect(instance.enabled).to.be(expectedValueLiteral);
    })

    it('should have the property estimateOperation (base name: "estimateOperation")', function () {
      // TODO: update the code to test the property estimateOperation
      // expect(instance)to.have.property('estimateOperation')
      // expect(instance.estimateOperation).to.be(expectedValueLiteral);
    })

    it('should have the property estimateValue (base name: "estimateValue")', function () {
      // TODO: update the code to test the property estimateValue
      // expect(instance)to.have.property('estimateValue')
      // expect(instance.estimateValue).to.be(expectedValueLiteral);
    })

    it('should have the property filterValues (base name: "filterValues")', function () {
      // TODO: update the code to test the property filterValues
      // expect(instance)to.have.property('filterValues')
      // expect(instance.filterValues).to.be(expectedValueLiteral);
    })

    it('should have the property filterValuesObj (base name: "filterValuesObj")', function () {
      // TODO: update the code to test the property filterValuesObj
      // expect(instance)to.have.property('filterValuesObj')
      // expect(instance.filterValuesObj).to.be(expectedValueLiteral);
    })

    it('should have the property ignoreRegularEventsEnabled (base name: "ignoreRegularEventsEnabled")', function () {
      // TODO: update the code to test the property ignoreRegularEventsEnabled
      // expect(instance)to.have.property('ignoreRegularEventsEnabled')
      // expect(instance.ignoreRegularEventsEnabled).to.be(expectedValueLiteral);
    })

    it('should have the property integrations (base name: "integrations")', function () {
      // TODO: update the code to test the property integrations
      // expect(instance)to.have.property('integrations')
      // expect(instance.integrations).to.be(expectedValueLiteral);
    })

    it('should have the property lastDataReceivedDate (base name: "lastDataReceivedDate")', function () {
      // TODO: update the code to test the property lastDataReceivedDate
      // expect(instance)to.have.property('lastDataReceivedDate')
      // expect(instance.lastDataReceivedDate).to.be(expectedValueLiteral);
    })

    it('should have the property lastSent (base name: "lastSent")', function () {
      // TODO: update the code to test the property lastSent
      // expect(instance)to.have.property('lastSent')
      // expect(instance.lastSent).to.be(expectedValueLiteral);
    })

    it('should have the property lastTriggered (base name: "lastTriggered")', function () {
      // TODO: update the code to test the property lastTriggered
      // expect(instance)to.have.property('lastTriggered')
      // expect(instance.lastTriggered).to.be(expectedValueLiteral);
    })

    it('should have the property metadata (base name: "metadata")', function () {
      // TODO: update the code to test the property metadata
      // expect(instance)to.have.property('metadata')
      // expect(instance.metadata).to.be(expectedValueLiteral);
    })

    it('should have the property metricKey (base name: "metricKey")', function () {
      // TODO: update the code to test the property metricKey
      // expect(instance)to.have.property('metricKey')
      // expect(instance.metricKey).to.be(expectedValueLiteral);
    })

    it('should have the property metricLabel (base name: "metricLabel")', function () {
      // TODO: update the code to test the property metricLabel
      // expect(instance)to.have.property('metricLabel')
      // expect(instance.metricLabel).to.be(expectedValueLiteral);
    })

    it('should have the property minDelayBetweenNotificationsInMinutes (base name: "minDelayBetweenNotificationsInMinutes")', function () {
      // TODO: update the code to test the property minDelayBetweenNotificationsInMinutes
      // expect(instance)to.have.property('minDelayBetweenNotificationsInMinutes')

      // expect(instance.minDelayBetweenNotificationsInMinutes).to.be(expectedValueLiteral);
    })

    it('should have the property name (base name: "name")', function () {
      // TODO: update the code to test the property name
      // expect(instance)to.have.property('name')
      // expect(instance.name).to.be(expectedValueLiteral);
    })

    it('should have the property notificationEmails (base name: "notificationEmails")', function () {
      // TODO: update the code to test the property notificationEmails
      // expect(instance)to.have.property('notificationEmails')
      // expect(instance.notificationEmails).to.be(expectedValueLiteral);
    })

    it('should have the property notificationIntegrations (base name: "notificationIntegrations")', function () {
      // TODO: update the code to test the property notificationIntegrations
      // expect(instance)to.have.property('notificationIntegrations')
      // expect(instance.notificationIntegrations).to.be(expectedValueLiteral);
    })

    it('should have the property notificationsEnabled (base name: "notificationsEnabled")', function () {
      // TODO: update the code to test the property notificationsEnabled
      // expect(instance)to.have.property('notificationsEnabled')
      // expect(instance.notificationsEnabled).to.be(expectedValueLiteral);
    })

    it('should have the property query (base name: "query")', function () {
      // TODO: update the code to test the property query
      // expect(instance)to.have.property('query')
      // expect(instance.query).to.be(expectedValueLiteral);
    })

    it('should have the property reportName (base name: "reportName")', function () {
      // TODO: update the code to test the property reportName
      // expect(instance)to.have.property('reportName')
      // expect(instance.reportName).to.be(expectedValueLiteral);
    })

    it('should have the property ruleKey (base name: "ruleKey")', function () {
      // TODO: update the code to test the property ruleKey
      // expect(instance)to.have.property('ruleKey')
      // expect(instance.ruleKey).to.be(expectedValueLiteral);
    })

    it('should have the property ruleType (base name: "ruleType")', function () {
      // TODO: update the code to test the property ruleType
      // expect(instance)to.have.property('ruleType')
      // expect(instance.ruleType).to.be(expectedValueLiteral);
    })

    it('should have the property runbook (base name: "runbook")', function () {
      // TODO: update the code to test the property runbook
      // expect(instance)to.have.property('runbook')
      // expect(instance.runbook).to.be(expectedValueLiteral);
    })

    it('should have the property savedQueryId (base name: "savedQueryId")', function () {
      // TODO: update the code to test the property savedQueryId
      // expect(instance)to.have.property('savedQueryId')
      // expect(instance.savedQueryId).to.be(expectedValueLiteral);
    })

    it('should have the property schedule (base name: "schedule")', function () {
      // TODO: update the code to test the property schedule
      // expect(instance)to.have.property('schedule')
      // expect(instance.schedule).to.be(expectedValueLiteral);
    })

    it('should have the property sematextService (base name: "sematextService")', function () {
      // TODO: update the code to test the property sematextService
      // expect(instance)to.have.property('sematextService')
      // expect(instance.sematextService).to.be(expectedValueLiteral);
    })

    it('should have the property sendToEmail (base name: "sendToEmail")', function () {
      // TODO: update the code to test the property sendToEmail
      // expect(instance)to.have.property('sendToEmail')
      // expect(instance.sendToEmail).to.be(expectedValueLiteral);
    })

    it('should have the property timezone (base name: "timezone")', function () {
      // TODO: update the code to test the property timezone
      // expect(instance)to.have.property('timezone')
      // expect(instance.timezone).to.be(expectedValueLiteral);
    })

    it('should have the property useOnlyAlertRuleIntegrations (base name: "useOnlyAlertRuleIntegrations")', function () {
      // TODO: update the code to test the property useOnlyAlertRuleIntegrations
      // expect(instance)to.have.property('useOnlyAlertRuleIntegrations')
      // expect(instance.useOnlyAlertRuleIntegrations).to.be(expectedValueLiteral);
    })

    it('should have the property userPermissions (base name: "userPermissions")', function () {
      // TODO: update the code to test the property userPermissions
      // expect(instance)to.have.property('userPermissions')
      // expect(instance.userPermissions).to.be(expectedValueLiteral);
    })

    it('should have the property valueColumnName (base name: "valueColumnName")', function () {
      // TODO: update the code to test the property valueColumnName
      // expect(instance)to.have.property('valueColumnName')
      // expect(instance.valueColumnName).to.be(expectedValueLiteral);
    })

    it('should have the property valueName (base name: "valueName")', function () {
      // TODO: update the code to test the property valueName
      // expect(instance)to.have.property('valueName')
      // expect(instance.valueName).to.be(expectedValueLiteral);
    })
  })
})
