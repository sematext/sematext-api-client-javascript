/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

'use strict'

//const SematextApiClientJavascript = import ('../../stcloud/index.js')
//import {expect} from 'chai'

/* eslint-disable no-unused-vars*/
var instance

describe('(package)', function () {
  describe('App', function () {
    beforeEach(function () {
      //instance = new SematextApiClientJavascript.App()
    })

    it('should create an instance of App', function () {
      // TODO: update the code to test App
      // expect(instance)to.be.a(SematextApiClientJavascript.App)
    })

    it('should have the property ajaxThreshold (base name: "ajaxThreshold")', function () {
      // TODO: update the code to test the property ajaxThreshold
      // expect(instance)to.have.property('ajaxThreshold')
      // expect(instance.ajaxThreshold).to.be(expectedValueLiteral);
    })

    it('should have the property appType (base name: "appType")', function () {
      // TODO: update the code to test the property appType
      // expect(instance)to.have.property('appType')
      // expect(instance.appType).to.be(expectedValueLiteral);
    })

    it('should have the property appTypeId (base name: "appTypeId")', function () {
      // TODO: update the code to test the property appTypeId
      // expect(instance)to.have.property('appTypeId')
      // expect(instance.appTypeId).to.be(expectedValueLiteral);
    })

    it('should have the property creatorEmail (base name: "creatorEmail")', function () {
      // TODO: update the code to test the property creatorEmail
      // expect(instance)to.have.property('creatorEmail')
      // expect(instance.creatorEmail).to.be(expectedValueLiteral);
    })

    it('should have the property creditCardExpiry (base name: "creditCardExpiry")', function () {
      // TODO: update the code to test the property creditCardExpiry
      // expect(instance)to.have.property('creditCardExpiry')
      // expect(instance.creditCardExpiry).to.be(expectedValueLiteral);
    })

    it('should have the property creditCardNumber (base name: "creditCardNumber")', function () {
      // TODO: update the code to test the property creditCardNumber
      // expect(instance)to.have.property('creditCardNumber')
      // expect(instance.creditCardNumber).to.be(expectedValueLiteral);
    })

    it('should have the property description (base name: "description")', function () {
      // TODO: update the code to test the property description
      // expect(instance)to.have.property('description')
      // expect(instance.description).to.be(expectedValueLiteral);
    })

    it('should have the property displayStatus (base name: "displayStatus")', function () {
      // TODO: update the code to test the property displayStatus
      // expect(instance)to.have.property('displayStatus')
      // expect(instance.displayStatus).to.be(expectedValueLiteral);
    })

    it('should have the property firstDataSavedDate (base name: "firstDataSavedDate")', function () {
      // TODO: update the code to test the property firstDataSavedDate
      // expect(instance)to.have.property('firstDataSavedDate')
      // expect(instance.firstDataSavedDate).to.be(expectedValueLiteral);
    })

    it('should have the property id (base name: "id")', function () {
      // TODO: update the code to test the property id
      // expect(instance)to.have.property('id')
      // expect(instance.id).to.be(expectedValueLiteral);
    })

    it('should have the property integration (base name: "integration")', function () {
      // TODO: update the code to test the property integration
      // expect(instance)to.have.property('integration')
      // expect(instance.integration).to.be(expectedValueLiteral);
    })

    it('should have the property lastDataReceivedDate (base name: "lastDataReceivedDate")', function () {
      // TODO: update the code to test the property lastDataReceivedDate
      // expect(instance)to.have.property('lastDataReceivedDate')
      // expect(instance.lastDataReceivedDate).to.be(expectedValueLiteral);
    })

    it('should have the property lastDataSavedDate (base name: "lastDataSavedDate")', function () {
      // TODO: update the code to test the property lastDataSavedDate
      // expect(instance)to.have.property('lastDataSavedDate')
      // expect(instance.lastDataSavedDate).to.be(expectedValueLiteral);
    })

    it('should have the property loggedInUserAppRole (base name: "loggedInUserAppRole")', function () {
      // TODO: update the code to test the property loggedInUserAppRole
      // expect(instance)to.have.property('loggedInUserAppRole')
      // expect(instance.loggedInUserAppRole).to.be(expectedValueLiteral);
    })

    it('should have the property monthlyInvoiceAccount (base name: "monthlyInvoiceAccount")', function () {
      // TODO: update the code to test the property monthlyInvoiceAccount
      // expect(instance)to.have.property('monthlyInvoiceAccount')
      // expect(instance.monthlyInvoiceAccount).to.be(expectedValueLiteral);
    })

    it('should have the property name (base name: "name")', function () {
      // TODO: update the code to test the property name
      // expect(instance)to.have.property('name')
      // expect(instance.name).to.be(expectedValueLiteral);
    })

    it('should have the property ownerEmail (base name: "ownerEmail")', function () {
      // TODO: update the code to test the property ownerEmail
      // expect(instance)to.have.property('ownerEmail')
      // expect(instance.ownerEmail).to.be(expectedValueLiteral);
    })

    it('should have the property owningOrganization (base name: "owningOrganization")', function () {
      // TODO: update the code to test the property owningOrganization
      // expect(instance)to.have.property('owningOrganization')
      // expect(instance.owningOrganization).to.be(expectedValueLiteral);
    })

    it('should have the property pageLoadThreshold (base name: "pageLoadThreshold")', function () {
      // TODO: update the code to test the property pageLoadThreshold
      // expect(instance)to.have.property('pageLoadThreshold')
      // expect(instance.pageLoadThreshold).to.be(expectedValueLiteral);
    })

    it('should have the property paymentMethodId (base name: "paymentMethodId")', function () {
      // TODO: update the code to test the property paymentMethodId
      // expect(instance)to.have.property('paymentMethodId')
      // expect(instance.paymentMethodId).to.be(expectedValueLiteral);
    })

    it('should have the property plan (base name: "plan")', function () {
      // TODO: update the code to test the property plan
      // expect(instance)to.have.property('plan')
      // expect(instance.plan).to.be(expectedValueLiteral);
    })

    it('should have the property prepaidAccount (base name: "prepaidAccount")', function () {
      // TODO: update the code to test the property prepaidAccount
      // expect(instance)to.have.property('prepaidAccount')
      // expect(instance.prepaidAccount).to.be(expectedValueLiteral);
    })

    it('should have the property status (base name: "status")', function () {
      // TODO: update the code to test the property status
      // expect(instance)to.have.property('status')
      // expect(instance.status).to.be(expectedValueLiteral);
    })

    it('should have the property token (base name: "token")', function () {
      // TODO: update the code to test the property token
      // expect(instance)to.have.property('token')
      // expect(instance.token).to.be(expectedValueLiteral);
    })

    it('should have the property trialEndDate (base name: "trialEndDate")', function () {
      // TODO: update the code to test the property trialEndDate
      // expect(instance)to.have.property('trialEndDate')
      // expect(instance.trialEndDate).to.be(expectedValueLiteral);
    })

    it('should have the property urlGroupLimit (base name: "urlGroupLimit")', function () {
      // TODO: update the code to test the property urlGroupLimit
      // expect(instance)to.have.property('urlGroupLimit')
      // expect(instance.urlGroupLimit).to.be(expectedValueLiteral);
    })

    it('should have the property userRoles (base name: "userRoles")', function () {
      // TODO: update the code to test the property userRoles
      // expect(instance)to.have.property('userRoles')
      // expect(instance.userRoles).to.be(expectedValueLiteral);
    })
  })
})
