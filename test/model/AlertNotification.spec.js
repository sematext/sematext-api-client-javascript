/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
;(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../stcloud/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../stcloud/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SematextApiClientJavascript)
  }
})(this, function (expect, SematextApiClientJavascript) {
  'use strict'

  var instance

  describe('(package)', function () {
    describe('AlertNotification', function () {
      beforeEach(function () {
        instance = new SematextApiClientJavascript.AlertNotification()
      })

      it('should create an instance of AlertNotification', function () {
        // TODO: update the code to test AlertNotification
        expect(instance).to.be.a(SematextApiClientJavascript.AlertNotification)
      })

      it('should have the property appName (base name: "appName")', function () {
        // TODO: update the code to test the property appName
        expect(instance).to.have.property('appName')
        // expect(instance.appName).to.be(expectedValueLiteral);
      })

      it('should have the property appType (base name: "appType")', function () {
        // TODO: update the code to test the property appType
        expect(instance).to.have.property('appType')
        // expect(instance.appType).to.be(expectedValueLiteral);
      })

      it('should have the property backToNormal (base name: "backToNormal")', function () {
        // TODO: update the code to test the property backToNormal
        expect(instance).to.have.property('backToNormal')
        // expect(instance.backToNormal).to.be(expectedValueLiteral);
      })

      it('should have the property createTime (base name: "createTime")', function () {
        // TODO: update the code to test the property createTime
        expect(instance).to.have.property('createTime')
        // expect(instance.createTime).to.be(expectedValueLiteral);
      })

      it('should have the property sent (base name: "sent")', function () {
        // TODO: update the code to test the property sent
        expect(instance).to.have.property('sent')
        // expect(instance.sent).to.be(expectedValueLiteral);
      })

      it('should have the property text (base name: "text")', function () {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text')
        // expect(instance.text).to.be(expectedValueLiteral);
      })

      it('should have the property when (base name: "when")', function () {
        // TODO: update the code to test the property when
        expect(instance).to.have.property('when')
        // expect(instance.when).to.be(expectedValueLiteral);
      })
    })
  })
})
