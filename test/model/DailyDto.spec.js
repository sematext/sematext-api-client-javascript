/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../stcloud/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../stcloud/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SematextApiClientJavascript);
  }
}(this, function(expect, SematextApiClientJavascript) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DailyDto', function() {
      beforeEach(function() {
        instance = new SematextApiClientJavascript.DailyDto();
      });

      it('should create an instance of DailyDto', function() {
        // TODO: update the code to test DailyDto
        expect(instance).to.be.a(SematextApiClientJavascript.DailyDto);
      });

      it('should have the property day (base name: "day")', function() {
        // TODO: update the code to test the property day
        expect(instance).to.have.property('day');
        // expect(instance.day).to.be(expectedValueLiteral);
      });

      it('should have the property failed (base name: "failed")', function() {
        // TODO: update the code to test the property failed
        expect(instance).to.have.property('failed');
        // expect(instance.failed).to.be(expectedValueLiteral);
      });

      it('should have the property ingestedCount (base name: "ingestedCount")', function() {
        // TODO: update the code to test the property ingestedCount
        expect(instance).to.have.property('ingestedCount');
        // expect(instance.ingestedCount).to.be(expectedValueLiteral);
      });

      it('should have the property ingestedVolume (base name: "ingestedVolume")', function() {
        // TODO: update the code to test the property ingestedVolume
        expect(instance).to.have.property('ingestedVolume');
        // expect(instance.ingestedVolume).to.be(expectedValueLiteral);
      });

      it('should have the property storedCount (base name: "storedCount")', function() {
        // TODO: update the code to test the property storedCount
        expect(instance).to.have.property('storedCount');
        // expect(instance.storedCount).to.be(expectedValueLiteral);
      });

      it('should have the property storedVolume (base name: "storedVolume")', function() {
        // TODO: update the code to test the property storedVolume
        expect(instance).to.have.property('storedVolume');
        // expect(instance.storedVolume).to.be(expectedValueLiteral);
      });

    });
  });

}));
