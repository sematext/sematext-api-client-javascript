/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

'use strict'

//const SematextApiClientJavascript = import ('../../stcloud/index.js')

/* eslint-disable no-unused-vars*/
var instance

beforeEach(function () {
  //instance = new SematextApiClientJavascript.SavedQueriesApi()
})

describe('(package)', function () {
  describe('SavedQueriesApi', function () {
    describe('deleteSavedQueryUsingDELETE', function () {
      it('should call deleteSavedQueryUsingDELETE successfully', function (done) {
        // TODO: uncomment, update parameter values for deleteSavedQueryUsingDELETE call and complete the assertions
        /*
          var updateableQueryId = 789;

          instance.deleteSavedQueryUsingDELETE(updateableQueryId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('getSavedQueriesForAppUsingGET', function () {
      it('should call getSavedQueriesForAppUsingGET successfully', function (done) {
        // TODO: uncomment, update parameter values for getSavedQueriesForAppUsingGET call and complete the assertions
        /*
          var appId = 789;

          instance.getSavedQueriesForAppUsingGET(appId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('saveQueryUsingPOST', function () {
      it('should call saveQueryUsingPOST successfully', function (done) {
        // TODO: uncomment, update parameter values for saveQueryUsingPOST call and complete the assertions
        /*
          var savedQueryDto = new SematextApiClientJavascript.SavedQuery();
          savedQueryDto.alertRule = new SematextApiClientJavascript.AlertRule();
          savedQueryDto.alertRule.allowedAppTypes = ["0"];
          savedQueryDto.alertRule.analyzingTime = "";
          savedQueryDto.alertRule.appId = "0";
          savedQueryDto.alertRule.backToNormalNeeded = false;
          savedQueryDto.alertRule.chartKey = "";
          savedQueryDto.alertRule.color = "";
          savedQueryDto.alertRule.description = "";
          savedQueryDto.alertRule.disallowedAppTypes = ["0"];
          savedQueryDto.alertRule.enabled = false;
          savedQueryDto.alertRule.estimateOperation = "LESS";
          savedQueryDto.alertRule.estimateValue = 0.0;
          savedQueryDto.alertRule.filterValues = "";
          savedQueryDto.alertRule.filterValuesObj = [new SematextApiClientJavascript.FilterValue()];
          savedQueryDto.alertRule.filterValuesObj[0].aggType = "";
          savedQueryDto.alertRule.filterValuesObj[0].filterName = "";
          savedQueryDto.alertRule.filterValuesObj[0].key = "";
          savedQueryDto.alertRule.filterValuesObj[0].label = "";
          savedQueryDto.alertRule.filterValuesObj[0].name = "";
          savedQueryDto.alertRule.filterValuesObj[0].values = [""];
          savedQueryDto.alertRule.ignoreRegularEventsEnabled = false;
          savedQueryDto.alertRule.metadata = ;
          savedQueryDto.alertRule.metricLabel = "";
          savedQueryDto.alertRule.minDelayBetweenNotificationsInMinutes = "";
          savedQueryDto.alertRule.name = "";
          savedQueryDto.alertRule.notificationEmails = [""];
          savedQueryDto.alertRule.notificationIntegrations = [new SematextApiClientJavascript.NotificationIntegration()];
          savedQueryDto.alertRule.notificationIntegrations[0].applicability = "NONE";
          savedQueryDto.alertRule.notificationIntegrations[0].createDate = new Date();
          savedQueryDto.alertRule.notificationIntegrations[0].createdByOwner = false;
          savedQueryDto.alertRule.notificationIntegrations[0].creatorId = "0";
          savedQueryDto.alertRule.notificationIntegrations[0].id = "0";
          savedQueryDto.alertRule.notificationIntegrations[0].integrationType = "PAGER_DUTY";
          savedQueryDto.alertRule.notificationIntegrations[0].name = "";
          savedQueryDto.alertRule.notificationIntegrations[0].params = {key: ""};
          savedQueryDto.alertRule.notificationIntegrations[0].state = "ACTIVE";
          savedQueryDto.alertRule.notificationIntegrations[0].userId = "0";
          savedQueryDto.alertRule.notificationsEnabled = false;
          savedQueryDto.alertRule.query = "";
          savedQueryDto.alertRule.reportName = "";
          savedQueryDto.alertRule.ruleType = "";
          savedQueryDto.alertRule.runbook = "";
          savedQueryDto.alertRule.schedule = [new SematextApiClientJavascript.AlertRuleScheduleWeekdayDto()];
          savedQueryDto.alertRule.schedule[0].day = "";
          savedQueryDto.alertRule.schedule[0].index = 0;
          savedQueryDto.alertRule.schedule[0].intervals = [new SematextApiClientJavascript.AlertRuleScheduleTimeRangeDto()];
          savedQueryDto.alertRule.schedule[0].intervals[0].end = "";
          savedQueryDto.alertRule.schedule[0].intervals[0].start = "";
          savedQueryDto.alertRule.schedule[0].label = "";
          savedQueryDto.alertRule.schedule[0].type = "";
          savedQueryDto.alertRule.sendToEmail = "";
          savedQueryDto.alertRule.timezone = "";
          savedQueryDto.alertRule.useOnlyAlertRuleIntegrations = false;
          savedQueryDto.alertRule.userPermissions = new SematextApiClientJavascript.UserPermissions();
          savedQueryDto.alertRule.userPermissions.canDelete = false;
          savedQueryDto.alertRule.userPermissions.canEdit = false;
          savedQueryDto.alertRule.userPermissions.canView = false;
          savedQueryDto.applicationId = "";
          savedQueryDto.labelColor = "";
          savedQueryDto.logseneAlertType = ;
          savedQueryDto.queryName = "";
          savedQueryDto.queryString = "";
          savedQueryDto.userPermissions = new SematextApiClientJavascript.UserPermissions();
          savedQueryDto.userPermissions.canDelete = false;
          savedQueryDto.userPermissions.canEdit = false;
          savedQueryDto.userPermissions.canView = false;

          instance.saveQueryUsingPOST(savedQueryDto).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('saveQueryUsingPUT', function () {
      it('should call saveQueryUsingPUT successfully', function (done) {
        // TODO: uncomment, update parameter values for saveQueryUsingPUT call and complete the assertions
        /*
          var savedQueryDto = new SematextApiClientJavascript.SavedQuery();
          savedQueryDto.alertRule = new SematextApiClientJavascript.AlertRule();
          savedQueryDto.alertRule.allowedAppTypes = ["0"];
          savedQueryDto.alertRule.analyzingTime = "";
          savedQueryDto.alertRule.appId = "0";
          savedQueryDto.alertRule.backToNormalNeeded = false;
          savedQueryDto.alertRule.chartKey = "";
          savedQueryDto.alertRule.color = "";
          savedQueryDto.alertRule.description = "";
          savedQueryDto.alertRule.disallowedAppTypes = ["0"];
          savedQueryDto.alertRule.enabled = false;
          savedQueryDto.alertRule.estimateOperation = "LESS";
          savedQueryDto.alertRule.estimateValue = 0.0;
          savedQueryDto.alertRule.filterValues = "";
          savedQueryDto.alertRule.filterValuesObj = [new SematextApiClientJavascript.FilterValue()];
          savedQueryDto.alertRule.filterValuesObj[0].aggType = "";
          savedQueryDto.alertRule.filterValuesObj[0].filterName = "";
          savedQueryDto.alertRule.filterValuesObj[0].key = "";
          savedQueryDto.alertRule.filterValuesObj[0].label = "";
          savedQueryDto.alertRule.filterValuesObj[0].name = "";
          savedQueryDto.alertRule.filterValuesObj[0].values = [""];
          savedQueryDto.alertRule.ignoreRegularEventsEnabled = false;
          savedQueryDto.alertRule.metadata = ;
          savedQueryDto.alertRule.metricLabel = "";
          savedQueryDto.alertRule.minDelayBetweenNotificationsInMinutes = "";
          savedQueryDto.alertRule.name = "";
          savedQueryDto.alertRule.notificationEmails = [""];
          savedQueryDto.alertRule.notificationIntegrations = [new SematextApiClientJavascript.NotificationIntegration()];
          savedQueryDto.alertRule.notificationIntegrations[0].applicability = "NONE";
          savedQueryDto.alertRule.notificationIntegrations[0].createDate = new Date();
          savedQueryDto.alertRule.notificationIntegrations[0].createdByOwner = false;
          savedQueryDto.alertRule.notificationIntegrations[0].creatorId = "0";
          savedQueryDto.alertRule.notificationIntegrations[0].id = "0";
          savedQueryDto.alertRule.notificationIntegrations[0].integrationType = "PAGER_DUTY";
          savedQueryDto.alertRule.notificationIntegrations[0].name = "";
          savedQueryDto.alertRule.notificationIntegrations[0].params = {key: ""};
          savedQueryDto.alertRule.notificationIntegrations[0].state = "ACTIVE";
          savedQueryDto.alertRule.notificationIntegrations[0].userId = "0";
          savedQueryDto.alertRule.notificationsEnabled = false;
          savedQueryDto.alertRule.query = "";
          savedQueryDto.alertRule.reportName = "";
          savedQueryDto.alertRule.ruleType = "";
          savedQueryDto.alertRule.runbook = "";
          savedQueryDto.alertRule.schedule = [new SematextApiClientJavascript.AlertRuleScheduleWeekdayDto()];
          savedQueryDto.alertRule.schedule[0].day = "";
          savedQueryDto.alertRule.schedule[0].index = 0;
          savedQueryDto.alertRule.schedule[0].intervals = [new SematextApiClientJavascript.AlertRuleScheduleTimeRangeDto()];
          savedQueryDto.alertRule.schedule[0].intervals[0].end = "";
          savedQueryDto.alertRule.schedule[0].intervals[0].start = "";
          savedQueryDto.alertRule.schedule[0].label = "";
          savedQueryDto.alertRule.schedule[0].type = "";
          savedQueryDto.alertRule.sendToEmail = "";
          savedQueryDto.alertRule.timezone = "";
          savedQueryDto.alertRule.useOnlyAlertRuleIntegrations = false;
          savedQueryDto.alertRule.userPermissions = new SematextApiClientJavascript.UserPermissions();
          savedQueryDto.alertRule.userPermissions.canDelete = false;
          savedQueryDto.alertRule.userPermissions.canEdit = false;
          savedQueryDto.alertRule.userPermissions.canView = false;
          savedQueryDto.applicationId = "";
          savedQueryDto.labelColor = "";
          savedQueryDto.logseneAlertType = ;
          savedQueryDto.queryName = "";
          savedQueryDto.queryString = "";
          savedQueryDto.userPermissions = new SematextApiClientJavascript.UserPermissions();
          savedQueryDto.userPermissions.canDelete = false;
          savedQueryDto.userPermissions.canEdit = false;
          savedQueryDto.userPermissions.canView = false;
          var updateableQueryId = 789;

          instance.saveQueryUsingPUT(savedQueryDto, updateableQueryId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
  })
})
