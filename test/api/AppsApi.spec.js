/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */
'use strict'

//const SematextApiClientJavascript = import ('../../stcloud/index.js')

/* eslint-disable no-unused-vars*/
var instance

beforeEach(function () {
  //instance = new SematextApiClientJavascript.AppsApi()
})

describe('(package)', function () {
  describe('AppsApi', function () {
    describe('getAppTypesUsingGET', function () {
      it('should call getAppTypesUsingGET successfully', function (done) {
        // TODO: uncomment getAppTypesUsingGET call and complete the assertions
        /*

          instance.getAppTypesUsingGET().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('getUsingGET', function () {
      it('should call getUsingGET successfully', function (done) {
        // TODO: uncomment, update parameter values for getUsingGET call and complete the assertions
        /*
          var anyStateAppId = 789;

          instance.getUsingGET(anyStateAppId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('inviteAppGuestsUsingPOST', function () {
      it('should call inviteAppGuestsUsingPOST successfully', function (done) {
        // TODO: uncomment, update parameter values for inviteAppGuestsUsingPOST call and complete the assertions
        /*
          var invitation = new SematextApiClientJavascript.Invitation();
          invitation.app = new SematextApiClientJavascript.App();
          invitation.app.ajaxThreshold = "0";
          invitation.app.appType = "";
          invitation.app.appTypeId = "0";
          invitation.app.creatorEmail = "";
          invitation.app.creditCardExpiry = "";
          invitation.app.creditCardNumber = "";
          invitation.app.description = "";
          invitation.app.displayStatus = "";
          invitation.app.firstDataSavedDate = "0";
          invitation.app.id = "0";
          invitation.app.integration = new SematextApiClientJavascript.ServiceIntegration();
          invitation.app.integration.appTypeId = "0";
          invitation.app.integration.appTypeName = "";
          invitation.app.integration.displayName = "";
          invitation.app.integration.enabled = false;
          invitation.app.integration.externalProductId = "0";
          invitation.app.integration.externalProductName = "";
          invitation.app.integration.id = "0";
          invitation.app.integration.integrationType = "";
          invitation.app.integration.ordinal = 0;
          invitation.app.integration.parentIntegrationId = "0";
          invitation.app.integration.sematextService = "";
          invitation.app.integration.visible = false;
          invitation.app.lastDataReceivedDate = "0";
          invitation.app.lastDataSavedDate = "0";
          invitation.app.loggedInUserAppRole = "";
          invitation.app.monthlyInvoiceAccount = false;
          invitation.app.name = "";
          invitation.app.ownerEmail = "";
          invitation.app.owningOrganization = new SematextApiClientJavascript.BasicOrganizationDto();
          invitation.app.owningOrganization.authMethods = [new SematextApiClientJavascript.BasicAuthMethodDto()];
          invitation.app.owningOrganization.authMethods[0].authType = "SEMATEXT_ACCOUNT";
          invitation.app.owningOrganization.authMethods[0].uuid = "";
          invitation.app.owningOrganization.name = "";
          invitation.app.owningOrganization.status = "ACTIVE";
          invitation.app.owningOrganization.uuid = "";
          invitation.app.pageLoadThreshold = "0";
          invitation.app.paymentMethodId = "0";
          invitation.app.plan = new SematextApiClientJavascript.Plan();
          invitation.app.plan.appType = "";
          invitation.app.plan.custom = false;
          invitation.app.plan.dataRetentionHours = ;
          invitation.app.plan.defaultTrialPlan = false;
          invitation.app.plan.free = false;
          invitation.app.plan.freeTrialDays = "0";
          invitation.app.plan.id = "0";
          invitation.app.plan.maxAlerts = "0";
          invitation.app.plan.maxDailyEvents = "0";
          invitation.app.plan.name = "";
          invitation.app.plan.planScheme = "SPM_1_0";
          invitation.app.plan.sematextService = "LOGSENE";
          invitation.app.plan.trialPlan = false;
          invitation.app.prepaidAccount = false;
          invitation.app.status = "";
          invitation.app.token = "";
          invitation.app.trialEndDate = "0";
          invitation.app.urlGroupLimit = 0;
          invitation.app.userRoles = [new SematextApiClientJavascript.UserRole()];
          invitation.app.userRoles[0].role = "SUPER_USER";
          invitation.app.userRoles[0].roleStatus = "INACTIVE";
          invitation.app.userRoles[0].userEmail = "";
          invitation.apps = [new SematextApiClientJavascript.App()];
          invitation.apps[0].ajaxThreshold = "0";
          invitation.apps[0].appType = "";
          invitation.apps[0].appTypeId = "0";
          invitation.apps[0].creatorEmail = "";
          invitation.apps[0].creditCardExpiry = "";
          invitation.apps[0].creditCardNumber = "";
          invitation.apps[0].description = "";
          invitation.apps[0].displayStatus = "";
          invitation.apps[0].firstDataSavedDate = "0";
          invitation.apps[0].id = "0";
          invitation.apps[0].integration = new SematextApiClientJavascript.ServiceIntegration();
          invitation.apps[0].integration.appTypeId = "0";
          invitation.apps[0].integration.appTypeName = "";
          invitation.apps[0].integration.displayName = "";
          invitation.apps[0].integration.enabled = false;
          invitation.apps[0].integration.externalProductId = "0";
          invitation.apps[0].integration.externalProductName = "";
          invitation.apps[0].integration.id = "0";
          invitation.apps[0].integration.integrationType = "";
          invitation.apps[0].integration.ordinal = 0;
          invitation.apps[0].integration.parentIntegrationId = "0";
          invitation.apps[0].integration.sematextService = "";
          invitation.apps[0].integration.visible = false;
          invitation.apps[0].lastDataReceivedDate = "0";
          invitation.apps[0].lastDataSavedDate = "0";
          invitation.apps[0].loggedInUserAppRole = "";
          invitation.apps[0].monthlyInvoiceAccount = false;
          invitation.apps[0].name = "";
          invitation.apps[0].ownerEmail = "";
          invitation.apps[0].owningOrganization = new SematextApiClientJavascript.BasicOrganizationDto();
          invitation.apps[0].owningOrganization.authMethods = [new SematextApiClientJavascript.BasicAuthMethodDto()];
          invitation.apps[0].owningOrganization.authMethods[0].authType = "SEMATEXT_ACCOUNT";
          invitation.apps[0].owningOrganization.authMethods[0].uuid = "";
          invitation.apps[0].owningOrganization.name = "";
          invitation.apps[0].owningOrganization.status = "ACTIVE";
          invitation.apps[0].owningOrganization.uuid = "";
          invitation.apps[0].pageLoadThreshold = "0";
          invitation.apps[0].paymentMethodId = "0";
          invitation.apps[0].plan = new SematextApiClientJavascript.Plan();
          invitation.apps[0].plan.appType = "";
          invitation.apps[0].plan.custom = false;
          invitation.apps[0].plan.dataRetentionHours = ;
          invitation.apps[0].plan.defaultTrialPlan = false;
          invitation.apps[0].plan.free = false;
          invitation.apps[0].plan.freeTrialDays = "0";
          invitation.apps[0].plan.id = "0";
          invitation.apps[0].plan.maxAlerts = "0";
          invitation.apps[0].plan.maxDailyEvents = "0";
          invitation.apps[0].plan.name = "";
          invitation.apps[0].plan.planScheme = "SPM_1_0";
          invitation.apps[0].plan.sematextService = "LOGSENE";
          invitation.apps[0].plan.trialPlan = false;
          invitation.apps[0].prepaidAccount = false;
          invitation.apps[0].status = "";
          invitation.apps[0].token = "";
          invitation.apps[0].trialEndDate = "0";
          invitation.apps[0].urlGroupLimit = 0;
          invitation.apps[0].userRoles = [new SematextApiClientJavascript.UserRole()];
          invitation.apps[0].userRoles[0].role = "SUPER_USER";
          invitation.apps[0].userRoles[0].roleStatus = "INACTIVE";
          invitation.apps[0].userRoles[0].userEmail = "";
          invitation.inviteeEmail = "guest@sematext.com";
          invitation.inviteeRole = "DEMO";

          instance.inviteAppGuestsUsingPOST(invitation).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('listAppsUsersUsingGET', function () {
      it('should call listAppsUsersUsingGET successfully', function (done) {
        // TODO: uncomment listAppsUsersUsingGET call and complete the assertions
        /*

          instance.listAppsUsersUsingGET().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('listUsingGET', function () {
      it('should call listUsingGET successfully', function (done) {
        // TODO: uncomment listUsingGET call and complete the assertions
        /*

          instance.listUsingGET().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('updateDescriptionUsingPUT', function () {
      it('should call updateDescriptionUsingPUT successfully', function (done) {
        // TODO: uncomment, update parameter values for updateDescriptionUsingPUT call and complete the assertions
        /*
          var anyStateAppId = 789;
          var opts = {};
          opts.updateDetails = new SematextApiClientJavascript.AppDescription();
          opts.updateDetails.description = "";

          instance.updateDescriptionUsingPUT(anyStateAppId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('updateUsingPUT1', function () {
      it('should call updateUsingPUT1 successfully', function (done) {
        // TODO: uncomment, update parameter values for updateUsingPUT1 call and complete the assertions
        /*
          var dto = new SematextApiClientJavascript.UpdateAppInfo();
          dto.description = "New Description of App";
          dto.ignorePercentage = 1;
          dto.maxEvents = 1000;
          dto.maxLimitMB = 10;
          dto.name = "New Name";
          dto.sampling = false;
          dto.samplingPercentage = 10;
          dto.staggering = false;
          dto.status = "ACTIVE";
          var anyStateAppId = 789;

          instance.updateUsingPUT1(dto, anyStateAppId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
  })
})
