/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
;(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../stcloud/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../stcloud/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SematextApiClientJavascript)
  }
})(this, function (expect, SematextApiClientJavascript) {
  'use strict'

  var instance

  beforeEach(function () {
    instance = new SematextApiClientJavascript.SubscriptionsApi()
  })

  describe('(package)', function () {
    describe('SubscriptionsApi', function () {
      describe('createForAppUsingPOST', function () {
        it('should call createForAppUsingPOST successfully', function (done) {
          // TODO: uncomment, update parameter values for createForAppUsingPOST call and complete the assertions
          /*

          instance.createForAppUsingPOST(body, appId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.SubscriptionResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('createForDashUsingPOST1', function () {
        it('should call createForDashUsingPOST1 successfully', function (done) {
          // TODO: uncomment, update parameter values for createForDashUsingPOST1 call and complete the assertions
          /*

          instance.createForDashUsingPOST1(body, dashId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.SubscriptionResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('deleteUsingDELETE2', function () {
        it('should call deleteUsingDELETE2 successfully', function (done) {
          // TODO: uncomment, update parameter values for deleteUsingDELETE2 call and complete the assertions
          /*

          instance.deleteUsingDELETE2(updateableSubscriptionId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericMapBasedApiResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('listUsingGET3', function () {
        it('should call listUsingGET3 successfully', function (done) {
          // TODO: uncomment, update parameter values for listUsingGET3 call and complete the assertions
          /*

          instance.listUsingGET3(appId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.SubscriptionsResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('listUsingGET5', function () {
        it('should call listUsingGET5 successfully', function (done) {
          // TODO: uncomment listUsingGET5 call and complete the assertions
          /*

          instance.listUsingGET5().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.SubscriptionsResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('sendAppReportUsingPOST', function () {
        it('should call sendAppReportUsingPOST successfully', function (done) {
          // TODO: uncomment, update parameter values for sendAppReportUsingPOST call and complete the assertions
          /*

          instance.sendAppReportUsingPOST(body, appId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.MailReportResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('sendDashReportUsingPOST', function () {
        it('should call sendDashReportUsingPOST successfully', function (done) {
          // TODO: uncomment, update parameter values for sendDashReportUsingPOST call and complete the assertions
          /*

          instance.sendDashReportUsingPOST(body, dashId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.MailReportResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('toggleEnabledUsingPUT1', function () {
        it('should call toggleEnabledUsingPUT1 successfully', function (done) {
          // TODO: uncomment, update parameter values for toggleEnabledUsingPUT1 call and complete the assertions
          /*

          instance.toggleEnabledUsingPUT1(body, updateableSubscriptionId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.SubscriptionResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('updateForAppUsingPUT', function () {
        it('should call updateForAppUsingPUT successfully', function (done) {
          // TODO: uncomment, update parameter values for updateForAppUsingPUT call and complete the assertions
          /*

          instance.updateForAppUsingPUT(body, appId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.SubscriptionResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
      describe('updateForDashUsingPUT1', function () {
        it('should call updateForDashUsingPUT1 successfully', function (done) {
          // TODO: uncomment, update parameter values for updateForDashUsingPUT1 call and complete the assertions
          /*

          instance.updateForDashUsingPUT1(body, dashId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.SubscriptionResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done()
        })
      })
    })
  })
})
