/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */
'use strict'

//const SematextApiClientJavascript = import ('../../stcloud/index.js')

/* eslint-disable no-unused-vars*/
var instance

beforeEach(function () {
  //instance = new SematextApiClientJavascript.AlertsApi()
})

describe('(package)', function () {
  describe('AlertsApi', function () {
    describe('createAlertUsingPOST', function () {
      it('should call createAlertUsingPOST successfully', function (done) {
        // TODO: uncomment, update parameter values for createAlertUsingPOST call and complete the assertions
        /*
          var dto = new SematextApiClientJavascript.AlertRule();
          dto.allowedAppTypes = ["0"];
          dto.analyzingTime = "";
          dto.appId = "0";
          dto.backToNormalNeeded = false;
          dto.chartKey = "";
          dto.color = "";
          dto.description = "";
          dto.disallowedAppTypes = ["0"];
          dto.enabled = false;
          dto.estimateOperation = "LESS";
          dto.estimateValue = 0.0;
          dto.filterValues = "";
          dto.filterValuesObj = [new SematextApiClientJavascript.FilterValue()];
          dto.filterValuesObj[0].aggType = "";
          dto.filterValuesObj[0].filterName = "";
          dto.filterValuesObj[0].key = "";
          dto.filterValuesObj[0].label = "";
          dto.filterValuesObj[0].name = "";
          dto.filterValuesObj[0].values = [""];
          dto.ignoreRegularEventsEnabled = false;
          dto.metadata = ;
          dto.metricLabel = "";
          dto.minDelayBetweenNotificationsInMinutes = "";
          dto.name = "";
          dto.notificationEmails = [""];
          dto.notificationIntegrations = [new SematextApiClientJavascript.NotificationIntegration()];
          dto.notificationIntegrations[0].applicability = "NONE";
          dto.notificationIntegrations[0].createDate = new Date();
          dto.notificationIntegrations[0].createdByOwner = false;
          dto.notificationIntegrations[0].creatorId = "0";
          dto.notificationIntegrations[0].id = "0";
          dto.notificationIntegrations[0].integrationType = "PAGER_DUTY";
          dto.notificationIntegrations[0].name = "";
          dto.notificationIntegrations[0].params = {key: ""};
          dto.notificationIntegrations[0].state = "ACTIVE";
          dto.notificationIntegrations[0].userId = "0";
          dto.notificationsEnabled = false;
          dto.query = "";
          dto.reportName = "";
          dto.ruleType = "";
          dto.runbook = "";
          dto.schedule = [new SematextApiClientJavascript.AlertRuleScheduleWeekdayDto()];
          dto.schedule[0].day = "";
          dto.schedule[0].index = 0;
          dto.schedule[0].intervals = [new SematextApiClientJavascript.AlertRuleScheduleTimeRangeDto()];
          dto.schedule[0].intervals[0].end = "";
          dto.schedule[0].intervals[0].start = "";
          dto.schedule[0].label = "";
          dto.schedule[0].type = "";
          dto.sendToEmail = "";
          dto.timezone = "";
          dto.useOnlyAlertRuleIntegrations = false;
          dto.userPermissions = new SematextApiClientJavascript.UserPermissions();
          dto.userPermissions.canDelete = false;
          dto.userPermissions.canEdit = false;
          dto.userPermissions.canView = false;

          instance.createAlertUsingPOST(dto).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('deleteAlertRuleUsingDELETE', function () {
      it('should call deleteAlertRuleUsingDELETE successfully', function (done) {
        // TODO: uncomment, update parameter values for deleteAlertRuleUsingDELETE call and complete the assertions
        /*
          var updateableAlertId = 789;

          instance.deleteAlertRuleUsingDELETE(updateableAlertId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('disableAlertRuleUsingPUT', function () {
      it('should call disableAlertRuleUsingPUT successfully', function (done) {
        // TODO: uncomment, update parameter values for disableAlertRuleUsingPUT call and complete the assertions
        /*
          var updateableAlertId = 789;

          instance.disableAlertRuleUsingPUT(updateableAlertId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('enableAlertRuleUsingPUT', function () {
      it('should call enableAlertRuleUsingPUT successfully', function (done) {
        // TODO: uncomment, update parameter values for enableAlertRuleUsingPUT call and complete the assertions
        /*
          var updateableAlertId = 789;

          instance.enableAlertRuleUsingPUT(updateableAlertId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
    describe('getAlertRulesForAppUsingGET', function () {
      it('should call getAlertRulesForAppUsingGET successfully', function (done) {
        // TODO: uncomment, update parameter values for getAlertRulesForAppUsingGET call and complete the assertions
        /*
          var appId = 789;

          instance.getAlertRulesForAppUsingGET(appId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SematextApiClientJavascript.GenericApiResponse);
            expect(data.data).to.be.a(Object);
            // expect(data.data).to.be();
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SematextApiClientJavascript.Error);
                expect(data.code).to.be.a('string');
                // expect(data.code).to.be("");
                expect(data.message).to.be.a('string');
                // expect(data.message).to.be("");
              }
            }
            expect(data.message).to.be.a('string');
            // expect(data.message).to.be("");
            expect(data.success).to.be.a('boolean');
            // expect(data.success).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done()
      })
    })
  })
})
