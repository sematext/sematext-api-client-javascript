/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient'
import { CreateTokenDto } from '../model/CreateTokenDto'
import { GenericMapBasedApiResponse } from '../model/GenericMapBasedApiResponse'
import { TokenResponse } from '../model/TokenResponse'
import { TokensResponse } from '../model/TokensResponse'
import { UpdateTokenDto } from '../model/UpdateTokenDto'

/**
 * TokensApiController service.
 * @module api/TokensApiControllerApi
 * @version 0.4.0
 */
export class TokensApiControllerApi {
  /**
    * Constructs a new TokensApiControllerApi. 
    * @alias module:api/TokensApiControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
   * Create new app token
   * @param {module:model/CreateTokenDto} body dto
   * @param {Number} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenResponse} and HTTP response
   */
  createAppToken1WithHttpInfo (body, appId) {
    let postBody = body
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling createAppToken1"
      )
    }
    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error(
        "Missing the required parameter 'appId' when calling createAppToken1"
      )
    }

    let pathParams = {
      appId: appId
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = TokenResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Create new app token
   * @param {<&vendorExtensions.x-jsdoc-type>} body dto
   * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenResponse}
   */
  createAppToken1 (body, appId) {
    return this.createAppToken1WithHttpInfo(body, appId).then(function (
      response_and_data
    ) {
      return response_and_data.data
    })
  }

  /**
   * Delete app token
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericMapBasedApiResponse} and HTTP response
   */
  deleteAppToken1WithHttpInfo (appId, tokenId) {
    let postBody = null
    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error(
        "Missing the required parameter 'appId' when calling deleteAppToken1"
      )
    }
    // verify the required parameter 'tokenId' is set
    if (tokenId === undefined || tokenId === null) {
      throw new Error(
        "Missing the required parameter 'tokenId' when calling deleteAppToken1"
      )
    }

    let pathParams = {
      appId: appId,
      tokenId: tokenId
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = GenericMapBasedApiResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens/{tokenId}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Delete app token
   * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
   * @param {<&vendorExtensions.x-jsdoc-type>} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericMapBasedApiResponse}
   */
  deleteAppToken1 (appId, tokenId) {
    return this.deleteAppToken1WithHttpInfo(appId, tokenId).then(function (
      response_and_data
    ) {
      return response_and_data.data
    })
  }

  /**
   * Get app available tokens
   * @param {Number} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokensResponse} and HTTP response
   */
  getAppTokensWithHttpInfo (appId) {
    let postBody = null
    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error(
        "Missing the required parameter 'appId' when calling getAppTokens"
      )
    }

    let pathParams = {
      appId: appId
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = TokensResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Get app available tokens
   * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokensResponse}
   */
  getAppTokens (appId) {
    return this.getAppTokensWithHttpInfo(appId).then(function (
      response_and_data
    ) {
      return response_and_data.data
    })
  }

  /**
   * Regenerate app token)
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenResponse} and HTTP response
   */
  regenerateAppToken1WithHttpInfo (appId, tokenId) {
    let postBody = null
    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error(
        "Missing the required parameter 'appId' when calling regenerateAppToken1"
      )
    }
    // verify the required parameter 'tokenId' is set
    if (tokenId === undefined || tokenId === null) {
      throw new Error(
        "Missing the required parameter 'tokenId' when calling regenerateAppToken1"
      )
    }

    let pathParams = {
      appId: appId,
      tokenId: tokenId
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = TokenResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens/{tokenId}/regenerate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Regenerate app token)
   * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
   * @param {<&vendorExtensions.x-jsdoc-type>} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenResponse}
   */
  regenerateAppToken1 (appId, tokenId) {
    return this.regenerateAppToken1WithHttpInfo(appId, tokenId).then(function (
      response_and_data
    ) {
      return response_and_data.data
    })
  }

  /**
   * Update app token (enable/disable or name)
   * @param {module:model/UpdateTokenDto} body dto
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenResponse} and HTTP response
   */
  updateAppToken1WithHttpInfo (body, appId, tokenId) {
    let postBody = body
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling updateAppToken1"
      )
    }
    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error(
        "Missing the required parameter 'appId' when calling updateAppToken1"
      )
    }
    // verify the required parameter 'tokenId' is set
    if (tokenId === undefined || tokenId === null) {
      throw new Error(
        "Missing the required parameter 'tokenId' when calling updateAppToken1"
      )
    }

    let pathParams = {
      appId: appId,
      tokenId: tokenId
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = TokenResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens/{tokenId}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Update app token (enable/disable or name)
   * @param {<&vendorExtensions.x-jsdoc-type>} body dto
   * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
   * @param {<&vendorExtensions.x-jsdoc-type>} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenResponse}
   */
  updateAppToken1 (body, appId, tokenId) {
    return this.updateAppToken1WithHttpInfo(body, appId, tokenId).then(
      function (response_and_data) {
        return response_and_data.data
      }
    )
  }
}
