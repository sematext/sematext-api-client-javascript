/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient'
import { BillingInfo } from '../model/BillingInfo'
import { InvoiceResponse } from '../model/InvoiceResponse'
import { PlansResponse } from '../model/PlansResponse'
import { UpdatePlanResponse } from '../model/UpdatePlanResponse'

/**
 * Billing service.
 * @module api/BillingApi
 * @version 0.4.0
 */
export class BillingApi {
  /**
    * Constructs a new BillingApi. 
    * @alias module:api/BillingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
   * Get invoice details
   * @param {String} service service
   * @param {Number} year year
   * @param {Number} month month
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvoiceResponse} and HTTP response
   */
  getDetailedInvoiceUsingGETWithHttpInfo (service, year, month) {
    let postBody = null
    // verify the required parameter 'service' is set
    if (service === undefined || service === null) {
      throw new Error(
        "Missing the required parameter 'service' when calling getDetailedInvoiceUsingGET"
      )
    }
    // verify the required parameter 'year' is set
    if (year === undefined || year === null) {
      throw new Error(
        "Missing the required parameter 'year' when calling getDetailedInvoiceUsingGET"
      )
    }
    // verify the required parameter 'month' is set
    if (month === undefined || month === null) {
      throw new Error(
        "Missing the required parameter 'month' when calling getDetailedInvoiceUsingGET"
      )
    }

    let pathParams = {
      service: service,
      year: year,
      month: month
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = InvoiceResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/billing/invoice/{service}/{year}/{month}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Get invoice details
   * @param {<&vendorExtensions.x-jsdoc-type>} service service
   * @param {<&vendorExtensions.x-jsdoc-type>} year year
   * @param {<&vendorExtensions.x-jsdoc-type>} month month
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvoiceResponse}
   */
  getDetailedInvoiceUsingGET (service, year, month) {
    return this.getDetailedInvoiceUsingGETWithHttpInfo(
      service,
      year,
      month
    ).then(function (response_and_data) {
      return response_and_data.data
    })
  }

  /**
   * Get available plans
   * @param {Object} opts Optional parameters
   * @param {Number} opts.integrationId integrationId
   * @param {String} opts.appType appType
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PlansResponse} and HTTP response
   */
  listAvailablePlansUsingGET1WithHttpInfo (opts) {
    opts = opts || {}
    let postBody = null

    let pathParams = {}
    let queryParams = {
      integrationId: opts['integrationId'],
      appType: opts['appType']
    }
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = PlansResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/billing/availablePlans',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Get available plans
   * @param {Object} opts Optional parameters
   * @param {Number} opts.integrationId integrationId
   * @param {String} opts.appType appType
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PlansResponse}
   */
  listAvailablePlansUsingGET1 (opts) {
    return this.listAvailablePlansUsingGET1WithHttpInfo(opts).then(function (
      response_and_data
    ) {
      return response_and_data.data
    })
  }

  /**
   * Update plan for an app
   * @param {module:model/BillingInfo} body dto
   * @param {Number} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdatePlanResponse} and HTTP response
   */
  updatePlanUsingPUTWithHttpInfo (body, appId) {
    let postBody = body
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling updatePlanUsingPUT"
      )
    }
    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error(
        "Missing the required parameter 'appId' when calling updatePlanUsingPUT"
      )
    }

    let pathParams = {
      appId: appId
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = UpdatePlanResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/billing/info/{appId}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
   * Update plan for an app
   * @param {<&vendorExtensions.x-jsdoc-type>} body dto
   * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdatePlanResponse}
   */
  updatePlanUsingPUT (body, appId) {
    return this.updatePlanUsingPUTWithHttpInfo(body, appId).then(function (
      response_and_data
    ) {
      return response_and_data.data
    })
  }
}
