/**
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient.js'
import Dimension from '../model/Dimension.js'
import TagNamesResponse from '../model/TagNamesResponse.js'

/**
* TagApiController service.
* @module api/TagApiControllerApi
* @version 0.1.0
*/
export default class TagApiControllerApi {

  /**
  * Constructs a new TagApiControllerApi.
  * @alias module:api/TagApiControllerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }



  /**
   * Gets tag names for the given application identifiers appearing in the given time frame.
   * @param {Object} opts Optional parameters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagNamesResponse} and HTTP response
   */
  getTagNamesUsingGETWithHttpInfo(appIds, opts) {
    opts = opts || {}
    let postBody = null

    let pathParams = {
      'appIds': appIds
    }
    let queryParams = {
      'from': opts['from'],
      'to': opts['to'],
      'metrics': opts['metrics'],
      'logs': opts['logs'],
      'events': opts['events'],
      'rum': opts['rum']
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = TagNamesResponse

    return this.apiClient.callApi(
      '/spm-reports/api/v3/apps/{appIds}/tagNames', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Gets tag names for the given application identifiers appearing in the given time frame.
   * @param {Object} opts Optional parameters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagNamesResponse}
   */
  getTagNamesUsingGET(appIds, opts) {
    return this.getTagNamesUsingGETWithHttpInfo(appIds, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Gets values for specified tags for the given application identifiers appearing in the given time frame.
   * @param {Object} opts Optional parameters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{'String': Dimension}>} and HTTP response
   */
  getUsingGET2WithHttpInfo(appIds, tag, opts) {
    opts = opts || {}
    let postBody = null

    let pathParams = {
      'appIds': appIds
    }
    let queryParams = {
      'from': opts['from'],
      'to': opts['to'],
      'tag': this.apiClient.buildCollectionParam(tag, 'multi'),
      'metrics': opts['metrics'],
      'logs': opts['logs'],
      'events': opts['events'],
      'rum': opts['rum']
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = { 'String': Dimension }

    return this.apiClient.callApi(
      '/spm-reports/api/v3/apps/{appIds}/metrics/filters', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Gets values for specified tags for the given application identifiers appearing in the given time frame.
   * @param {Object} opts Optional parameters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{'String': Dimension}>}
   */
  getUsingGET2(appIds, tag, opts) {
    return this.getUsingGET2WithHttpInfo(appIds, tag, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Gets values for specified tags for the given application identifiers appearing in the given time frame.
   * @param {Object} opts Optional parameters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{'String': Dimension}>} and HTTP response
   */
  getUsingGET3WithHttpInfo(appIds, tag, opts) {
    opts = opts || {}
    let postBody = null

    let pathParams = {
      'appIds': appIds
    }
    let queryParams = {
      'from': opts['from'],
      'to': opts['to'],
      'tag': this.apiClient.buildCollectionParam(tag, 'multi'),
      'metrics': opts['metrics'],
      'logs': opts['logs'],
      'events': opts['events'],
      'rum': opts['rum']
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = { 'String': Dimension }

    return this.apiClient.callApi(
      '/spm-reports/api/v3/apps/{appIds}/tags', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Gets values for specified tags for the given application identifiers appearing in the given time frame.
   * @param {Object} opts Optional parameters
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{'String': Dimension}>}
   */
  getUsingGET3(appIds, tag, opts) {
    return this.getUsingGET3WithHttpInfo(appIds, tag, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

}
