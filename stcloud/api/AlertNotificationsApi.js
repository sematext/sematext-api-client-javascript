/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AlertNotificationRequest} from '../model/AlertNotificationRequest';
import {NotificationsResponse} from '../model/NotificationsResponse';

/**
* AlertNotifications service.
* @module api/AlertNotificationsApi
* @version 0.5.0
*/
export class AlertNotificationsApi {

    /**
    * Constructs a new AlertNotificationsApi. 
    * @alias module:api/AlertNotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get alert notifications for an app
     * Default value of interval is 1d
     * @param {module:model/AlertNotificationRequest} body Time Interval
     * @param {Number} appId appId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationsResponse} and HTTP response
     */
    getAlertNotificationsForAppUsingPOSTWithHttpInfo(body, appId) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAlertNotificationsForAppUsingPOST");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAlertNotificationsForAppUsingPOST");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationsResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/{appId}/notifications/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get alert notifications for an app
     * Default value of interval is 1d
     * @param {<&vendorExtensions.x-jsdoc-type>} body Time Interval
     * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationsResponse}
     */
    getAlertNotificationsForAppUsingPOST(body, appId) {
      return this.getAlertNotificationsForAppUsingPOSTWithHttpInfo(body, appId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get alert notifications for a user
     * Default value of interval is 1d
     * @param {module:model/AlertNotificationRequest} body Time Interval
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationsResponse} and HTTP response
     */
    getAlertNotificationsForUserUsingPOSTWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAlertNotificationsForUserUsingPOST");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationsResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/notifications/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get alert notifications for a user
     * Default value of interval is 1d
     * @param {<&vendorExtensions.x-jsdoc-type>} body Time Interval
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationsResponse}
     */
    getAlertNotificationsForUserUsingPOST(body) {
      return this.getAlertNotificationsForUserUsingPOSTWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}