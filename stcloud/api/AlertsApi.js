/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AlertRule} from '../model/AlertRule';
import {AlertRuleResponse} from '../model/AlertRuleResponse';
import {AlertRulesResponse} from '../model/AlertRulesResponse';
import {GenericMapBasedApiResponse} from '../model/GenericMapBasedApiResponse';

/**
* Alerts service.
* @module api/AlertsApi
* @version 0.5.0
*/
export class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create alert rule
     * @param {module:model/AlertRule} body dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertRuleResponse} and HTTP response
     */
    createAlertUsingPOSTWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAlertUsingPOST");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlertRuleResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create alert rule
     * @param {<&vendorExtensions.x-jsdoc-type>} body dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertRuleResponse}
     */
    createAlertUsingPOST(body) {
      return this.createAlertUsingPOSTWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete alert rule
     * @param {Number} updateableAlertId updateableAlertId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericMapBasedApiResponse} and HTTP response
     */
    deleteAlertRuleUsingDELETEWithHttpInfo(updateableAlertId) {
      
      let postBody = null;
      // verify the required parameter 'updateableAlertId' is set
      if (updateableAlertId === undefined || updateableAlertId === null) {
        throw new Error("Missing the required parameter 'updateableAlertId' when calling deleteAlertRuleUsingDELETE");
      }

      let pathParams = {
        'updateableAlertId': updateableAlertId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenericMapBasedApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/alerts/{updateableAlertId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete alert rule
     * @param {<&vendorExtensions.x-jsdoc-type>} updateableAlertId updateableAlertId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericMapBasedApiResponse}
     */
    deleteAlertRuleUsingDELETE(updateableAlertId) {
      return this.deleteAlertRuleUsingDELETEWithHttpInfo(updateableAlertId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Disable alert rule
     * @param {Number} updateableAlertId updateableAlertId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericMapBasedApiResponse} and HTTP response
     */
    disableAlertRuleUsingPUT1WithHttpInfo(updateableAlertId) {
      
      let postBody = null;
      // verify the required parameter 'updateableAlertId' is set
      if (updateableAlertId === undefined || updateableAlertId === null) {
        throw new Error("Missing the required parameter 'updateableAlertId' when calling disableAlertRuleUsingPUT1");
      }

      let pathParams = {
        'updateableAlertId': updateableAlertId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenericMapBasedApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/alerts/{updateableAlertId}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Disable alert rule
     * @param {<&vendorExtensions.x-jsdoc-type>} updateableAlertId updateableAlertId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericMapBasedApiResponse}
     */
    disableAlertRuleUsingPUT1(updateableAlertId) {
      return this.disableAlertRuleUsingPUT1WithHttpInfo(updateableAlertId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enable alert rule
     * @param {Number} updateableAlertId updateableAlertId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericMapBasedApiResponse} and HTTP response
     */
    enableAlertRuleUsingPUTWithHttpInfo(updateableAlertId) {
      
      let postBody = null;
      // verify the required parameter 'updateableAlertId' is set
      if (updateableAlertId === undefined || updateableAlertId === null) {
        throw new Error("Missing the required parameter 'updateableAlertId' when calling enableAlertRuleUsingPUT");
      }

      let pathParams = {
        'updateableAlertId': updateableAlertId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenericMapBasedApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/alerts/{updateableAlertId}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enable alert rule
     * @param {<&vendorExtensions.x-jsdoc-type>} updateableAlertId updateableAlertId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericMapBasedApiResponse}
     */
    enableAlertRuleUsingPUT(updateableAlertId) {
      return this.enableAlertRuleUsingPUTWithHttpInfo(updateableAlertId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get alert rules for an app
     * @param {Number} appId appId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertRulesResponse} and HTTP response
     */
    getAlertRulesForAppUsingGETWithHttpInfo(appId) {
      
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAlertRulesForAppUsingGET");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertRulesResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/{appId}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get alert rules for an app
     * @param {<&vendorExtensions.x-jsdoc-type>} appId appId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertRulesResponse}
     */
    getAlertRulesForAppUsingGET(appId) {
      return this.getAlertRulesForAppUsingGETWithHttpInfo(appId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}