/**
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient.js'
import GenericMapBasedApiResponse from '../model/GenericMapBasedApiResponse.js'
import MailReportResponse from '../model/MailReportResponse.js'
import SubscriptionResponse from '../model/SubscriptionResponse.js'
import SubscriptionsResponse from '../model/SubscriptionsResponse.js'

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 0.1.0
*/
export default class SubscriptionsApi {

  /**
  * Constructs a new SubscriptionsApi.
  * @alias module:api/SubscriptionsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }



  /**
   * Create App subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionResponse} and HTTP response
   */
  createForAppUsingPOST1WithHttpInfo(body, appId) {
    let postBody = body

    let pathParams = {
      'appId': appId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = SubscriptionResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/subscription', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Create App subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionResponse}
   */
  createForAppUsingPOST1(body, appId) {
    return this.createForAppUsingPOST1WithHttpInfo(body, appId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Create dashboard subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionResponse} and HTTP response
   */
  createForDashUsingPOSTWithHttpInfo(body, dashId) {
    let postBody = body

    let pathParams = {
      'dashId': dashId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = SubscriptionResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/dashboards/{dashId}/subscription', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Create dashboard subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionResponse}
   */
  createForDashUsingPOST(body, dashId) {
    return this.createForDashUsingPOSTWithHttpInfo(body, dashId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Delete subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericMapBasedApiResponse} and HTTP response
   */
  deleteUsingDELETE2WithHttpInfo(updateableSubscriptionId) {
    let postBody = null

    let pathParams = {
      'updateableSubscriptionId': updateableSubscriptionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = GenericMapBasedApiResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/subscriptions/{updateableSubscriptionId}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Delete subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericMapBasedApiResponse}
   */
  deleteUsingDELETE2(updateableSubscriptionId) {
    return this.deleteUsingDELETE2WithHttpInfo(updateableSubscriptionId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Get subscriptions for an App
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionsResponse} and HTTP response
   */
  listUsingGET2WithHttpInfo(appId) {
    let postBody = null

    let pathParams = {
      'appId': appId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = SubscriptionsResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/subscriptions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Get subscriptions for an App
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionsResponse}
   */
  listUsingGET2(appId) {
    return this.listUsingGET2WithHttpInfo(appId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Get current account&#x27;s subscriptions
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionsResponse} and HTTP response
   */
  listUsingGET5WithHttpInfo() {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = SubscriptionsResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/subscriptions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Get current account&#x27;s subscriptions
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionsResponse}
   */
  listUsingGET5() {
    return this.listUsingGET5WithHttpInfo()
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Email an App report
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailReportResponse} and HTTP response
   */
  sendAppReportUsingPOST1WithHttpInfo(body, appId) {
    let postBody = body

    let pathParams = {
      'appId': appId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = MailReportResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/report/send', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Email an App report
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailReportResponse}
   */
  sendAppReportUsingPOST1(body, appId) {
    return this.sendAppReportUsingPOST1WithHttpInfo(body, appId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Email a dashboard report
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailReportResponse} and HTTP response
   */
  sendDashReportUsingPOSTWithHttpInfo(body, dashId) {
    let postBody = body

    let pathParams = {
      'dashId': dashId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = MailReportResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/dashboards/{dashId}/report/send', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Email a dashboard report
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailReportResponse}
   */
  sendDashReportUsingPOST(body, dashId) {
    return this.sendDashReportUsingPOSTWithHttpInfo(body, dashId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Toggle subscription status
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionResponse} and HTTP response
   */
  toggleEnabledUsingPUT1WithHttpInfo(body, updateableSubscriptionId) {
    let postBody = body

    let pathParams = {
      'updateableSubscriptionId': updateableSubscriptionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = SubscriptionResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/subscriptions/{updateableSubscriptionId}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Toggle subscription status
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionResponse}
   */
  toggleEnabledUsingPUT1(body, updateableSubscriptionId) {
    return this.toggleEnabledUsingPUT1WithHttpInfo(body, updateableSubscriptionId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Update App subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionResponse} and HTTP response
   */
  updateForAppUsingPUTWithHttpInfo(body, appId) {
    let postBody = body

    let pathParams = {
      'appId': appId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = SubscriptionResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/subscription', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Update App subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionResponse}
   */
  updateForAppUsingPUT(body, appId) {
    return this.updateForAppUsingPUTWithHttpInfo(body, appId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }


  /**
   * Update dashboard subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionResponse} and HTTP response
   */
  updateForDashUsingPUT1WithHttpInfo(body, dashId) {
    let postBody = body

    let pathParams = {
      'dashId': dashId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = ['api_key']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = SubscriptionResponse

    return this.apiClient.callApi(
      '/users-web/api/v3/dashboards/{dashId}/subscription', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    )
  }

  /**
   * Update dashboard subscription
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionResponse}
   */
  updateForDashUsingPUT1(body, dashId) {
    return this.updateForDashUsingPUT1WithHttpInfo(body, dashId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

}
